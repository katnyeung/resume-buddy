package com.resumebuddy.model.graph;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import org.springframework.data.neo4j.core.schema.Id;
import org.springframework.data.neo4j.core.schema.Node;
import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.schema.Relationship;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Neo4j Node: Represents a job experience from a resume.
 *
 * This is a graph entity (not JPA). It represents a job that will be:
 * - Mapped to ONE primary O*NET Occupation (in this simplified step 1)
 * - Linked to extracted Skills
 *
 * Graph Structure:
 *   (Job)-[MAPS_TO {confidence}]->(Occupation)
 *   (Job)-[REQUIRES_SKILL {proficiency}]->(Skill)
 */
@Node("Job")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Job {

    @Id
    private String id;  // UUID generated by application

    @Property("title")
    private String title;

    @Property("company")
    private String company;

    @Property("description")
    private String description;

    @Property("startDate")
    private String startDate;  // Flexible string format (e.g., "2020-01", "2020")

    @Property("endDate")
    private String endDate;  // "Present" or actual date

    @Property("location")
    private String location;

    @Property("resumeId")
    private String resumeId;  // Link back to MySQL Resume entity

    @Property("experienceId")
    private String experienceId;  // Link to MySQL ResumeAnalysisExperience if available

    @Property("createdAt")
    private LocalDateTime createdAt;

    @Property("analyzedAt")
    private LocalDateTime analyzedAt;

    /**
     * Relationship: Job mapped to ONE primary Occupation (simplified for step 1)
     *
     * In step 2, we'll change this to allow multiple occupations.
     */
    @Relationship(type = "MAPS_TO", direction = Relationship.Direction.OUTGOING)
    private OccupationMapping primaryOccupation;

    /**
     * Relationship: Job requires multiple Skills
     */
    @Relationship(type = "REQUIRES_SKILL", direction = Relationship.Direction.OUTGOING)
    @Builder.Default
    private Set<SkillRequirement> skills = new HashSet<>();
}
